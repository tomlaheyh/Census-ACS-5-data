// census-geography-fetcher.js
//
// This script fetches ONLY geographic data (NAME, codes) for:
//   - All states
//   - All counties in each state
//   - All tracts in each county
//
// It writes out 3 files in the current directory:
//   states.js, counties.js, tracts.js
//
// Features:
//   - fetchWithRetry(...) for up to 3 attempts per request
//   - 3-second delay after each fetch
//   - API key appended to each URL to reduce rate limiting
//
// Usage: node census-geography-fetcher.js

const fs = require('fs');
// If Node < 18, install node-fetch and uncomment:
// const fetch = require('node-fetch');

// HARD-CODED API KEY: replace with yours
const CENSUS_API_KEY = '58c63bc07d82b39eb3acdde0318544bb2f8df53a';

// A small utility to pause
async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Fetch with up to `tries` attempts, waiting `delayMs` after each error
async function fetchWithRetry(url, tries = 3, delayMs = 3000) {
  for (let attempt = 1; attempt <= tries; attempt++) {
    try {
      const res = await fetch(url);
      if (!res.ok) {
        throw new Error(`HTTP error, status = ${res.status}`);
      }
      return await res.json();
    } catch (err) {
      console.error(
        `fetchWithRetry: attempt ${attempt} failed for:\n  ${url}\n  Reason: ${err}`
      );
      if (attempt < tries) {
        console.log(`  Retrying in ${delayMs}ms...`);
        await sleep(delayMs);
      } else {
        throw err; // out of tries
      }
    }
  }
}

async function getAllCensusGeography() {
  console.log('=== Fetching Basic Geographic Data (States, Counties, Tracts) with an API key ===');

  // 1. Fetch all states
  let statesData;
  try {
    const statesUrl = `https://api.census.gov/data/2023/acs/acs5?get=NAME&for=state:*&key=${CENSUS_API_KEY}`;
    console.log('Fetching all states...');
    statesData = await fetchWithRetry(statesUrl, 3, 3000);
    console.log(`  ✓ Received ${statesData.length - 1} states.\n`);

    // Wait 3s
    await sleep(3000);
  } catch (err) {
    console.error('Failed to fetch states:', err);
    return;
  }

  // Data structures
  const states = [];
  const counties = {}; // keyed by stateCode
  const tracts = {};   // keyed by [stateCode][countyCode]

  // 2. Fetch counties for each state
  try {
    for (let i = 1; i < statesData.length; i++) {
      const stateName = statesData[i][0];
      const stateCode = statesData[i][1];

      states.push({ name: stateName, value: stateCode });
      console.log(`Fetching counties for [${stateName}] (code: ${stateCode})...`);

      let countiesUrl = `https://api.census.gov/data/2023/acs/acs5?get=NAME&for=county:*&in=state:${stateCode}&key=${CENSUS_API_KEY}`;
      const countiesData = await fetchWithRetry(countiesUrl, 3, 3000);

      counties[stateCode] = [];
      for (let j = 1; j < countiesData.length; j++) {
        const [ cNameFull, cState, cCounty ] = countiesData[j];
        // e.g. "Los Angeles County, California"
        const countyName = cNameFull.split(',')[0];
        counties[cState].push({ name: countyName, value: cCounty });
      }

      console.log(`  ✓ Fetched ${counties[stateCode].length} counties for [${stateName}].\n`);
      await sleep(3000);
    }
    console.log('=== Finished fetching all states & counties ===\n');
  } catch (err) {
    console.error('Error fetching counties:', err);
    return;
  }

  // 3. Fetch tracts
  try {
    console.log('=== Now fetching census tracts for each county ===');
    for (let s = 0; s < states.length; s++) {
      const { name: stateName, value: stateCode } = states[s];
      if (!counties[stateCode]) continue;

      tracts[stateCode] = {};
      console.log(`Fetching tracts for [${stateName}] (code: ${stateCode})...`);

      for (let c = 0; c < counties[stateCode].length; c++) {
        const { name: countyName, value: countyCode } = counties[stateCode][c];

        let tractsUrl = `https://api.census.gov/data/2023/acs/acs5?get=NAME&for=tract:*&in=state:${stateCode}+county:${countyCode}&key=${CENSUS_API_KEY}`;
        const tractsData = await fetchWithRetry(tractsUrl, 3, 3000);

        tracts[stateCode][countyCode] = [];
        for (let t = 1; t < tractsData.length; t++) {
          const [ tNameFull, , , tTract ] = tractsData[t];
          tracts[stateCode][countyCode].push({
            name: tNameFull,
            value: tTract
          });
        }

        console.log(`  ✓ [${stateName}] [${countyName}] => ${tracts[stateCode][countyCode].length} tracts.`);
        // 3s delay
        await sleep(3000);
      }
    }

    console.log('\n=== Finished fetching all census tracts ===\n');
  } catch (err) {
    console.error('Error fetching tracts:', err);
    return;
  }

  // 4. Write out the data
  const statesContent = `// Generated by census-geography-fetcher.js
const censusStates = ${JSON.stringify(states, null, 2)};
`;
  const countiesContent = `// Generated by census-geography-fetcher.js
const censusCounties = ${JSON.stringify(counties, null, 2)};
`;
  const tractsContent = `// Generated by census-geography-fetcher.js
const censusTracts = ${JSON.stringify(tracts, null, 2)};
`;

  try {
    console.log('Writing states.js...');
    fs.writeFileSync('./states.js', statesContent, 'utf-8');

    console.log('Writing counties.js...');
    fs.writeFileSync('./counties.js', countiesContent, 'utf-8');

    console.log('Writing tracts.js...');
    fs.writeFileSync('./tracts.js', tractsContent, 'utf-8');

    console.log('\n=== Files Created Successfully ===');
    console.log('states.js, counties.js, tracts.js have been written to the current directory.');
  } catch (err) {
    console.error('Error writing output files:', err);
  }
}

// Invoke the function
getAllCensusGeography();
